from IPython.display import clear_output
def display_board(board):
    clear_output()
    print('   |   |  ')
    print(' ' + board[1]+' | '+board[2]+' | '+board[3])
    print('   |   |  ')
    print('-----------')
    print('   |   |  ')
    print(' ' + board[4]+' | '+board[5]+' | '+board[6])
    print('   |   |  ')
    print('-----------')
    print('   |   |  ')
    print(' ' + board[7]+' | '+board[8]+' | '+board[9])
    print('   |   |  ')
    
test_board = ['#', 'X', 'O', 'X', 'O', 'X', 'O', 'X', 'O', 'X']
display_board(test_board)

def player_input():
    marker = ''
    
    # KEEP ASKING PLAYER 1 to choose X or O
    
    while marker != 'X' and marker != 'O':
        marker = input('Player 1, choose X or O: ').upper()
    
    if marker == 'X':
        return('X','O')
    else:
        return('O','X')
        
def place_marker(board, marker, position):
    board[position] = marker
## Test
place_marker(test_board, '$',8)
display_board(test_board)

def win_check(board, mark):
    # Win tic tae toe?
    # all rows
    return((board[1] == mark and board[2] == mark and board[3] == mark) or
    (board[4] == mark and board[5] == mark and board[6] == mark) or
    (board[7] == mark and board[8] == mark and board[9] == mark) or
    (board[1] == mark and board[4] == mark and board[7] == mark) or
    (board[2] == mark and board[5] == mark and board[8] == mark) or
    (board[3] == mark and board[6] == mark and board[9] == mark) or
    (board[1] == mark and board[5] == mark and board[9] == mark) or
    (board[3] == mark and board[5] == mark and board[7] == mark))

#check
display_board(test_board)
win_check(test_board,'X')

import random 
def choose_first():
    if random.randint(0,1) == 0:
        return 'player1'
    else: 
        return 'player2'

# if board is available or not.
def space_check(board, position):
    return board[position] == ' '

# if boardis full and returns a boolean value.
def full_board_check(board):
    for i in range(1,10):
        if space_check(board, i):
            return False
    # board is full if we return full.
    return True

def player_choice(board):
    position = 0
    while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position):
        position = int(input('Choose a position: (1-9)'))
    return position

def replay():
    choice = input("Play again? Enter Yes or No")
    return choice == 'Yes'

print('Welcome to Tic Tac Toe!')
while True:
    the_board = [' ']*10
    player1_marker, player2_marker = player_input()
    
    turn = choose_first()
    print(turn + ' will go first')
    
    play_game = input('Ready to Play? Yes or no?')
    if play_game == 'Yes':
        game_on = True
    else: 
        game_on = False
        
    ## Game On!
    while game_on:
        if turn == 'Player 1':
            #Show the board
            display_board(the_board)
            #Choose a position
            position = player_choice(the_board)
            #Place the marker on the position
            place_marker(the_board, player1_marker, position)
            #Check if they won
            if win_check(the_board,player1_marker):
                display_board(the_board)
                print('Player 1 has won!!')
                game_on = False
            else:
                if full_board_check(the_board):
                    display_board(the_board)
                    print("Tie Game!")
                    game_on = False
                else:
                    turn = 'Player 2'

        else:
            #Show the board
            display_board(the_board)
            #Choose a position
            position = player_choice(the_board)
            #Place the marker on the position
            place_marker(the_board, player2_marker, position)
            #Check if they won
            if win_check(the_board,player2_marker):
                display_board(the_board)
                print('Player 2 has won!!')
                game_on = False
            else:
                if full_board_check(the_board):
                    display_board(the_board)
                    print("Tie Game!")
                    game_on = False
                else:
                    turn = 'Player 1'
    if not replay():
        break
